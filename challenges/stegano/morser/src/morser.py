
#
#    Morser class converts an alphanumerical string to 
#   a byte array using morse code
#
class Morser:
    def __init__(self):
        # point = 01, long = 11, blank = 00
        self.dict = [['a','011100000000'],
                     ['b','110101010000'],
                     ['c','110111010000'],
                     ['d','110101000000'],
                     ['e','010000000000'],
                     ['f','010111010000'],
                     ['g','111101000000'],
                     ['h','010101010000'],
                     ['i','010100000000'],
                     ['j','011111110000'],
                     ['k','110111000000'],
                     ['l','011101010000'],
                     ['m','111100000000'],
                     ['n','110100000000'],
                     ['o','111111000000'],
                     ['p','011111010000'],
                     ['q','111101110000'],
                     ['r','011101000000'],
                     ['s','010101000000'],
                     ['t','110000000000'],
                     ['u','010111000000'],
                     ['v','010101110000'],
                     ['w','011111000000'],
                     ['x','110101110000'],
                     ['y','110111110000'],
                     ['z','111101010000'],
                     ['1','011111111100'],
                     ['2','010111111100'],
                     ['3','010101111100'],
                     ['4','010101011100'],
                     ['5','010101010100'],
                     ['6','110101010100'],
                     ['7','111101010100'],
                     ['8','111111010100'],
                     ['9','111111110100'],
                     ['0','111111111100'],
                     [',','111101011111'],
                     ['.','011101110111'],
                     ['?','010111110101'],
                     [':','111111010101'],
                     [';','110111011100'],
                     ['/','110101110100'],
                     ['\'','011111111101'],
                     ['_','010111110111'],
                     [' ','000000000000']]
        self.unit = len(self.dict[0][1])

    def bytes_required(self, string):
        return len(string)*(self.unit/2)

    def to_byte_array(self, string):
        barray = ""
        for l in string.lower():
            for p in self.dict:
                if p[0] == l:
                    barray += p[1]
        #
        return barray

    def to_string(self, byte_array):
        string = ""
        for i in range(len(byte_array)/self.unit):
            for p in self.dict:
                if p[1] == byte_array[i*self.unit:i*self.unit+self.unit]:
                    string += p[0]
        return string
